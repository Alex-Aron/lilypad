import { TextEdit, Button, Slider, VerticalBox, ScrollView, StyleMetrics } from "std-widgets.slint";

export struct BackgroundRect := {
    x: float,
    y: float,
    w: float,
    h: float,
    color: color
}

// Related issues:
//   - Enter at end rendered wrong: https://github.com/slint-ui/slint/issues/1318
//   - Better system shortcuts: https://github.com/slint-ui/slint/issues/474
// Source: https://github.com/slint-ui/slint/blob/20c1c45253ca434b3d587ebb33dcdfdce85005bd/internal/compiler/widgets/common/common.slint#L47
MyTextEdit := ScrollView {
    property <length> font-size <=> input.font-size;
    property <string> text <=> input.text;
    has-focus <=> input.has-focus;
    property <TextWrap> wrap <=> input.wrap;
    property horizontal-alignment <=> input.horizontal-alignment;
    callback edited(string);
    forward-focus: input;

    horizontal-stretch: 1;
    vertical-stretch: 1;

    viewport-width: wrap == TextWrap.word-wrap ? root.visible-width : max(root.visible-width, input.preferred-width);
    viewport-height: max(self.visible-height, input.preferred-height);

    property <[BackgroundRect]> rectangles;
    for rect in rectangles: Rectangle {
        x: rect.x * 1px; // TODO: px vs pt
        y: rect.y * 1px;
        width: rect.w * 1px;
        height: rect.h * 1px;
        background: rect.color;
    }

    input := TextInput {
        edited => { root.edited(self.text); }
        color: white;
        single-line: false;
        wrap: word-wrap;
        font-family: "Roboto Mono";
        font-size: 14px;
        cursor-position-changed(cpos) => {
            if (cpos.x + viewport-x < StyleMetrics.layout-padding) {
                viewport-x = min(0px, max(parent.visible-width - width,  - cpos.x + StyleMetrics.layout-padding ));
            } else if (cpos.x + viewport-x > parent.visible-width - StyleMetrics.layout-padding) {
                viewport-x = min(0px, max(parent.visible-width - width,  parent.visible-width - cpos.x - StyleMetrics.layout-padding ));
            }
            if (cpos.y + viewport-y < StyleMetrics.layout-padding) {
                viewport-y = min(0px, max(parent.visible-height - height,  - cpos.y + StyleMetrics.layout-padding ));
            } else if (cpos.y + viewport-y > parent.visible-height - StyleMetrics.layout-padding - 20px) {
                // FIXME: font-height hardcoded to 20px
                viewport-y = min(0px, max(parent.visible-height - height,  parent.visible-height - cpos.y - StyleMetrics.layout-padding - 20px));
            }
        }
    }
}

MainWindow := Window {
    min-width: 300px;
    min-height: 300px;

    VerticalBox {
        padding: 0;

        editor := MyTextEdit {
            font-size: 14px;
            wrap: no-wrap;
            text <=> root.input;
            edited => { root.inputEdited() }
        }
    }
    
    property <string> input;
    property <[BackgroundRect]> rectangles <=> editor.rectangles;

    callback inputEdited();
}
